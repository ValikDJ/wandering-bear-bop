import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Send, X, MessageSquareText } from 'lucide-react';
import { searchIndex, SearchItem } from '@/data/searchIndex'; // Import SearchItem type
import { glossaryData } from '@/data/glossaryData';
import { expandQueryWithSynonyms } from '@/data/synonymMap';
import Fuse from 'fuse.js';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

interface AIAssistantProps {
  characterType: 'robot' | 'cat' | 'owl';
}

interface Message {
  sender: 'user' | 'ai';
  text: string;
}

// Helper function for emojis (moved here from SearchResultsPage.tsx)
const getEmojiForType = (type: SearchItem['type']) => {
  switch (type) {
    case 'lesson': return 'üìö';
    case 'example': return 'üí°';
    case 'quiz': return 'üéÆ';
    case 'project-template': return 'üöÄ';
    case 'glossary': return 'üìñ';
    default: return '';
  }
};

// Fuse.js options for searching the knowledge base
const fuseOptions = {
  keys: [
    { name: 'title', weight: 0.7 },
    { name: 'description', weight: 0.5 },
    { name: 'keywords', weight: 0.9 },
  ],
  threshold: 0.3, // Increased threshold for broader matches
  distance: 100,
  ignoreLocation: true,
};

const fuse = new Fuse(searchIndex, fuseOptions);

const AIAssistant: React.FC<AIAssistantProps> = ({ characterType }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messages]);

  const getCharacterSVG = useCallback(() => {
    const baseClasses = "w-full h-full object-contain animate-breathe";
    const speakingClass = isTyping ? "animate-speak" : "";

    switch (characterType) {
      case 'robot':
        return (
          <svg className={`${baseClasses} ${speakingClass}`} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="20" y="20" width="60" height="60" rx="10" fill="#60A5FA"/> {/* Body */}
            <circle cx="40" cy="40" r="5" fill="#fff"/> {/* Left Eye */}
            <circle cx="60" cy="40" r="5" fill="#fff"/> {/* Right Eye */}
            <rect x="35" y="60" width="30" height="5" rx="2" fill="#fff"/> {/* Mouth */}
            <rect x="30" y="10" width="5" height="10" fill="#60A5FA"/> {/* Left Antenna */}
            <rect x="65" y="10" width="5" height="10" fill="#60A5FA"/> {/* Right Antenna */}
          </svg>
        );
      case 'cat':
        return (
          <svg className={`${baseClasses} ${speakingClass}`} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="50" cy="55" r="35" fill="#FDBA74"/> {/* Head */}
            <path d="M30 40 L40 20 L50 40 Z" fill="#FDBA74"/> {/* Left Ear */}
            <path d="M70 40 L60 20 L50 40 Z" fill="#FDBA74"/> {/* Right Ear */}
            <circle cx="42" cy="50" r="3" fill="#fff"/> {/* Left Eye */}
            <circle cx="58" cy="50" r="3" fill="#fff"/> {/* Right Eye */}
            <path d="M50 60 Q45 65 50 70 Q55 65 50 60 Z" fill="#fff"/> {/* Mouth */}
            <line x1="40" y1="55" x2="30" y2="50" stroke="#333" strokeWidth="1"/> {/* Whiskers */}
            <line x1="40" y1="58" x2="30" y2="60" stroke="#333" strokeWidth="1"/>
            <line x1="60" y1="55" x2="70" y2="50" stroke="#333" strokeWidth="1"/>
            <line x1="60" y1="58" x2="70" y2="60" stroke="#333" strokeWidth="1"/>
          </svg>
        );
      case 'owl':
        return (
          <svg className={`${baseClasses} ${speakingClass}`} viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="50" cy="50" r="40" fill="#A78BFA"/> {/* Body */}
            <circle cx="38" cy="40" r="8" fill="#fff"/> {/* Left Eye */}
            <circle cx="62" cy="40" r="8" fill="#fff"/> {/* Right Eye */}
            <circle cx="38" cy="40" r="3" fill="#333"/> {/* Left Pupil */}
            <circle cx="62" cy="40" r="3" fill="#333"/> {/* Right Pupil */}
            <path d="M50 55 L45 65 L55 65 Z" fill="#FBBF24"/> {/* Beak */}
            <path d="M30 25 Q40 15 50 25 Q60 15 70 25" stroke="#333" strokeWidth="2" fill="none"/> {/* Eyebrows/Feathers */}
          </svg>
        );
      default:
        return null;
    }
  }, [characterType, isTyping]);

  const processAIResponse = useCallback((query: string) => {
    setIsTyping(true);
    const lowerCaseQuery = query.toLowerCase();
    const expandedQuery = expandQueryWithSynonyms(lowerCaseQuery).join(' ');

    let response = "–í–∏–±–∞—á, —è –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ —Ç–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∞–±–æ –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ —â–æ—Å—å —ñ–Ω—à–µ –∑ HTML/CSS.";

    // Try to find direct glossary term match
    const directGlossaryMatch = glossaryData.find(term => term.term.toLowerCase() === lowerCaseQuery);
    if (directGlossaryMatch) {
      response = `üìñ ${directGlossaryMatch.term}: ${directGlossaryMatch.definition}`;
      if (directGlossaryMatch.codeExample) {
        response += `\n\n–ü—Ä–∏–∫–ª–∞–¥:\n\`\`\`${directGlossaryMatch.language || 'html'}\n${directGlossaryMatch.codeExample}\n\`\`\``;
      }
    } else {
      // Use Fuse.js for broader search in searchIndex
      const results = fuse.search(expandedQuery);
      if (results.length > 0) {
        const bestMatch = results[0].item;
        let typeEmoji = getEmojiForType(bestMatch.type);
        response = `–ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ –ø–∏—Ç–∞—î—à –ø—Ä–æ "${bestMatch.title}" ${typeEmoji}. ${bestMatch.description}`;
        if (bestMatch.path) {
          response += ` –¢–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ —Ç—É—Ç: ${bestMatch.path}`;
        }
      }
    }

    // Add specific examples for common queries
    if (lowerCaseQuery.includes("–∫–æ–ª—ñ—Ä —Ç–ª–∞") || lowerCaseQuery.includes("background-color")) {
      response = "üé® –©–æ–± –ø–æ—Ñ–∞—Ä–±—É–≤–∞—Ç–∏ —Ç–ª–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `background-color` —É CSS! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `background-color: blue;`";
    } else if (lowerCaseQuery.includes("header") || lowerCaseQuery.includes("—Ö–µ–¥–µ—Ä")) {
      response = "üè† –£ —Ç–µ–≥—É `<header>` –∑–∞–∑–≤–∏—á–∞–π —Ä–æ–∑–º—ñ—â—É—é—Ç—å: –ª–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç—É, –º–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –≥–æ–ª–æ–≤–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏!";
    } else if (lowerCaseQuery.includes("–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è") || lowerCaseQuery.includes("–∫–∞—Ä—Ç–∏–Ω–∫–∞") || lowerCaseQuery.includes("img")) {
      response = "üñºÔ∏è –©–æ–± –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–µ–≥ `<img>`. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ `src` (—à–ª—è—Ö –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏) —Ç–∞ `alt` (–æ–ø–∏—Å)! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `<img src=\"–º–æ—è-–∫–∞—Ä—Ç–∏–Ω–∫–∞.jpg\" alt=\"–ú–æ—è —á—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞\">`";
    } else if (lowerCaseQuery.includes("—Ç–µ–∫—Å—Ç") || lowerCaseQuery.includes("–ø–∞—Ä–∞–≥—Ä–∞—Ñ") || lowerCaseQuery.includes("p")) {
      response = "üìù –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∞–±–æ –∞–±–∑–∞—Ü—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–µ–≥ `<p>`. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `<p>–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –º—ñ–π —Ç–µ–∫—Å—Ç!</p>`";
    } else if (lowerCaseQuery.includes("–ø–æ—Å–∏–ª–∞–Ω–Ω—è") || lowerCaseQuery.includes("a")) {
      response = "üîó –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–µ–≥ `<a>` —Ç–∞ –∞—Ç—Ä–∏–±—É—Ç `href` –¥–ª—è –∞–¥—Ä–µ—Å–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `<a href=\"https://google.com\">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ Google</a>`";
    } else if (lowerCaseQuery.includes("–∑–∞–≥–æ–ª–æ–≤–æ–∫") || lowerCaseQuery.includes("h1") || lowerCaseQuery.includes("h2")) {
      response = "‚úçÔ∏è –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–µ–≥–∏ `<h1>`, `<h2>`, `<h3>` —ñ —Ç–∞–∫ –¥–∞–ª—ñ. `<h1>` - –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–π! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `<h1>–ú—ñ–π –ì–æ–ª–æ–≤–Ω–∏–π –ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>`";
    } else if (lowerCaseQuery.includes("—Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É") || lowerCaseQuery.includes("font-size")) {
      response = "üìè –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `font-size` —É CSS. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `font-size: 18px;`";
    } else if (lowerCaseQuery.includes("—Ä–∞–º–∫–∞") || lowerCaseQuery.includes("border")) {
      response = "üñºÔ∏è –©–æ–± –¥–æ–¥–∞—Ç–∏ —Ä–∞–º–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `border` —É CSS. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `border: 2px solid red;`";
    } else if (lowerCaseQuery.includes("–≤—ñ–¥—Å—Ç—É–ø") || lowerCaseQuery.includes("margin") || lowerCaseQuery.includes("padding")) {
      response = "üì¶ –£ CSS —î `margin` (–∑–æ–≤–Ω—ñ—à–Ω—ñ–π –≤—ñ–¥—Å—Ç—É–ø, –≤—ñ–¥—à—Ç–æ–≤—Ö—É—î –≤—ñ–¥ —ñ–Ω—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤) —Ç–∞ `padding` (–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –≤—ñ–¥—Å—Ç—É–ø, –ø—Ä–æ—Å—Ç—ñ—Ä –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∞).";
    } else if (lowerCaseQuery.includes("—â–æ —Ç–∞–∫–µ html")) {
      response = "üåê HTML (HyperText Markup Language) - —Ü–µ –º–æ–≤–∞, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–æ–∫. –¶–µ —è–∫ –∫—ñ—Å—Ç—è–∫ —Ç–≤–æ–≥–æ —Å–∞–π—Ç—É!";
    } else if (lowerCaseQuery.includes("—â–æ —Ç–∞–∫–µ css")) {
      response = "üé® CSS (Cascading Style Sheets) - —Ü–µ –º–æ–≤–∞ —Å—Ç–∏–ª—ñ–≤, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–≥–ª—è–¥—É –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–æ–∫. –¶–µ —è–∫ –æ–¥—è–≥ –¥–ª—è —Ç–≤–æ–≥–æ —Å–∞–π—Ç—É!";
    } else if (lowerCaseQuery.includes("–ø—Ä–∏–≤—ñ—Ç") || lowerCaseQuery.includes("—è–∫ —Å–ø—Ä–∞–≤–∏")) {
      response = "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ HTML —Ç–∞ CSS. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?";
    }

    setTimeout(() => {
      setMessages((prev) => [...prev, { sender: 'ai', text: response }]);
      setIsTyping(false);
    }, 1500); // Simulate AI thinking time
  }, []);

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim() === '') return;

    const userMessage = input.trim();
    setMessages((prev) => [...prev, { sender: 'user', text: userMessage }]);
    setInput('');
    processAIResponse(userMessage);
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="rounded-full w-16 h-16 shadow-lg bg-primary text-primary-foreground hover:bg-primary/80 flex items-center justify-center"
          aria-label="–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç –∑ –ø–æ–º—ñ—á–Ω–∏–∫–æ–º"
        >
          <MessageSquareText className="w-8 h-8" />
        </Button>
      )}

      {isOpen && (
        <div className="bg-card border border-border rounded-lg shadow-xl flex flex-col w-80 h-96">
          <div className="flex justify-between items-center p-3 border-b border-border bg-primary text-primary-foreground rounded-t-lg">
            <h3 className="font-bold text-lg">–¢–≤—ñ–π –ü–æ–º—ñ—á–Ω–∏–∫</h3>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsOpen(false)}
              className="text-primary-foreground hover:bg-primary-foreground/20"
              aria-label="–ó–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç"
            >
              <X className="w-5 h-5" />
            </Button>
          </div>

          <div className="flex-grow p-3 overflow-y-auto custom-scrollbar">
            <ScrollArea className="h-full pr-2">
              {messages.length === 0 && (
                <div className="text-center text-muted-foreground mt-4">
                  –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ –ø—Ä–æ HTML –∞–±–æ CSS!
                </div>
              )}
              {messages.map((msg, index) => (
                <div
                  key={index}
                  className={cn(
                    "mb-2 p-2 rounded-lg max-w-[80%]",
                    msg.sender === 'user'
                      ? "ml-auto bg-blue-500 text-white rounded-br-none"
                      : "mr-auto bg-muted text-muted-foreground rounded-bl-none"
                  )}
                >
                  {msg.text}
                </div>
              ))}
              {isTyping && (
                <div className="mb-2 p-2 rounded-lg mr-auto bg-muted text-muted-foreground rounded-bl-none animate-pulse">
                  –ü–æ–º—ñ—á–Ω–∏–∫ –¥—Ä—É–∫—É—î...
                </div>
              )}
              <div ref={messagesEndRef} />
            </ScrollArea>
          </div>

          <div className="p-3 border-t border-border flex items-center gap-2">
            <div className="w-12 h-12 flex-shrink-0">
              {getCharacterSVG()}
            </div>
            <form onSubmit={handleSendMessage} className="flex-grow flex gap-2">
              <Input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="–ó–∞–ø–∏—Ç–∞–π —â–æ—Å—å..."
                className="flex-grow bg-input text-foreground"
                disabled={isTyping}
              />
              <Button type="submit" size="icon" disabled={isTyping}>
                <Send className="w-4 h-4" />
              </Button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AIAssistant;