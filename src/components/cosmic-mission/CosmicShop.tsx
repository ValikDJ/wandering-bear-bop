import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ShoppingCart, Zap } from "lucide-react";
import { toast } from "sonner";
import { cn } from "@/lib/utils";

interface CosmicShopProps {
  maxEnergy: number;
  setMaxEnergy: (value: number) => void;
  energyPerClick: number;
  setEnergyPerClick: (value: number) => void;
  regenerationAmountPerTick: number;
  setRegenerationAmountPerTick: (value: number) => void;
  regenerationTickIntervalMs: number;
  setRegenerationTickIntervalMs: (value: number) => void;
  currentEnergy: number;
  decreaseCosmicEnergy: (amount: number, actionType: 'purchase') => void;
}

const CosmicShop: React.FC<CosmicShopProps> = ({
  maxEnergy,
  setMaxEnergy,
  energyPerClick,
  setEnergyPerClick,
  regenerationAmountPerTick,
  setRegenerationAmountPerTick,
  regenerationTickIntervalMs,
  setRegenerationTickIntervalMs,
  currentEnergy,
  decreaseCosmicEnergy,
}) => {
  const upgrades = [
    {
      id: "increased-tank-1",
      name: "–ó–±—ñ–ª—å—à–µ–Ω–∏–π –ë–∞–∫ (250‚ö°)",
      description: "–ó–±—ñ–ª—å—à—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –µ–Ω–µ—Ä–≥—ñ—é –¥–æ 250.",
      cost: 300,
      effect: () => setMaxEnergy(250),
      isAvailable: maxEnergy < 250,
      isPurchased: maxEnergy >= 250,
      category: "energy",
    },
    {
      id: "increased-tank-2",
      name: "–í–µ–ª–∏–∫–∏–π –†–µ–∞–∫—Ç–æ—Ä (300‚ö°)",
      description: "–ó–±—ñ–ª—å—à—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –µ–Ω–µ—Ä–≥—ñ—é –¥–æ 300 (—Ñ—ñ–Ω–∞–ª).",
      cost: 500,
      effect: () => setMaxEnergy(300),
      isAvailable: maxEnergy < 300 && maxEnergy >= 250, // Requires previous upgrade
      isPurchased: maxEnergy >= 300,
      category: "energy",
    },
    {
      id: "double-click",
      name: "–ü–æ–¥–≤—ñ–π–Ω–∏–π –ö–ª—ñ–∫ (x2)",
      description: "–û—Ç—Ä–∏–º—É–π 2 –µ–Ω–µ—Ä–≥—ñ—ó –∑–∞ –∫–ª—ñ–∫.",
      cost: 200,
      effect: () => setEnergyPerClick(2),
      isAvailable: energyPerClick < 2,
      isPurchased: energyPerClick >= 2,
      category: "energy",
    },
    {
      id: "triple-click",
      name: "–ü–æ—Ç—Ä—ñ–π–Ω–∏–π –ö–ª—ñ–∫ (x3)",
      description: "–û—Ç—Ä–∏–º—É–π 3 –µ–Ω–µ—Ä–≥—ñ—ó –∑–∞ –∫–ª—ñ–∫.",
      cost: 400,
      effect: () => setEnergyPerClick(3),
      isAvailable: energyPerClick < 3 && energyPerClick >= 2, // Requires previous upgrade
      isPurchased: energyPerClick >= 3,
      category: "energy",
    },
    {
      id: "fast-regeneration",
      name: "–®–≤–∏–¥–∫–∞ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (5—Å)",
      description: "–ï–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥.",
      cost: 250,
      effect: () => setRegenerationTickIntervalMs(5000),
      isAvailable: regenerationTickIntervalMs > 5000,
      isPurchased: regenerationTickIntervalMs <= 5000,
      category: "automation",
    },
    {
      id: "energy-drone",
      name: "–ï–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏–π –î—Ä–æ–Ω (+1/5—Å)",
      description: "–î–æ–¥–∞—Ç–∫–æ–≤–æ +1 –µ–Ω–µ—Ä–≥—ñ—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥.",
      cost: 350,
      effect: () => setRegenerationAmountPerTick(prev => prev + 1),
      isAvailable: regenerationAmountPerTick < 2 && regenerationTickIntervalMs <= 5000, // Requires fast regeneration
      isPurchased: regenerationAmountPerTick >= 2,
      category: "automation",
    },
    {
      id: "cosmic-station",
      name: "–ö–æ—Å–º—ñ—á–Ω–∞ –°—Ç–∞–Ω—Ü—ñ—è (+2/5—Å)",
      description: "–î–æ–¥–∞—Ç–∫–æ–≤–æ +2 –µ–Ω–µ—Ä–≥—ñ—ó –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥ (—Ñ—ñ–Ω–∞–ª).",
      cost: 600,
      effect: () => setRegenerationAmountPerTick(prev => prev + 2),
      isAvailable: regenerationAmountPerTick < 4 && regenerationAmountPerTick >= 2, // Requires drone
      isPurchased: regenerationAmountPerTick >= 4,
      category: "automation",
    },
  ];

  const handlePurchase = (upgrade: typeof upgrades[0]) => {
    if (currentEnergy >= upgrade.cost) {
      decreaseCosmicEnergy(upgrade.cost, 'purchase');
      upgrade.effect();
      toast.success(`üéâ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è "${upgrade.name}" –ø—Ä–∏–¥–±–∞–Ω–æ!`);
    } else {
      toast.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ö–æ—Å–º—ñ—á–Ω–æ—ó –ï–Ω–µ—Ä–≥—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!");
    }
  };

  const energyUpgrades = upgrades.filter(u => u.category === "energy");
  const automationUpgrades = upgrades.filter(u => u.category === "automation");

  return (
    <Card className="mb-12 bg-card shadow-md">
      <CardHeader>
        <CardTitle className="text-3xl font-bold text-foreground flex items-center gap-3">
          <ShoppingCart className="h-8 w-8 text-primary" />
          –ö–æ—Å–º—ñ—á–Ω–∏–π –ú–∞–≥–∞–∑–∏–Ω
        </CardTitle>
      </CardHeader>
      <CardContent>
        <p className="mb-6 text-muted-foreground">
          –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–≤–æ—é –ö–æ—Å–º—ñ—á–Ω—É –ï–Ω–µ—Ä–≥—ñ—é, —â–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—é –±–∞–∑—É —Ç–∞ –ø—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ –∑–±—ñ—Ä –µ–Ω–µ—Ä–≥—ñ—ó!
        </p>

        <h3 className="text-2xl font-bold text-foreground mb-4">–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ï–Ω–µ—Ä–≥—ñ—ó:</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {energyUpgrades.map((upgrade) => (
            <Card key={upgrade.id} className={cn(
              "bg-muted p-4 flex flex-col justify-between",
              upgrade.isPurchased && "border-2 border-green-500 opacity-80"
            )}>
              <div>
                <h4 className="font-semibold text-lg text-secondary-foreground">{upgrade.name}</h4>
                <p className="text-sm text-muted-foreground mb-2">{upgrade.description}</p>
              </div>
              <div className="flex items-center justify-between mt-2">
                <span className="text-lg font-bold text-primary flex items-center gap-1">
                  <Zap className="h-5 w-5 text-yellow-500" /> {upgrade.cost}
                </span>
                {upgrade.isPurchased ? (
                  <Button disabled className="bg-green-600 text-white">–ü—Ä–∏–¥–±–∞–Ω–æ!</Button>
                ) : (
                  <Button
                    onClick={() => handlePurchase(upgrade)}
                    disabled={!upgrade.isAvailable || currentEnergy < upgrade.cost}
                    className="bg-brand-primary text-primary-foreground hover:bg-brand-primary-hover"
                  >
                    {upgrade.isAvailable ? "–ü—Ä–∏–¥–±–∞—Ç–∏" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                  </Button>
                )}
              </div>
            </Card>
          ))}
        </div>

        <h3 className="text-2xl font-bold text-foreground mt-8 mb-4">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è:</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {automationUpgrades.map((upgrade) => (
            <Card key={upgrade.id} className={cn(
              "bg-muted p-4 flex flex-col justify-between",
              upgrade.isPurchased && "border-2 border-green-500 opacity-80"
            )}>
              <div>
                <h4 className="font-semibold text-lg text-secondary-foreground">{upgrade.name}</h4>
                <p className="text-sm text-muted-foreground mb-2">{upgrade.description}</p>
              </div>
              <div className="flex items-center justify-between mt-2">
                <span className="text-lg font-bold text-primary flex items-center gap-1">
                  <Zap className="h-5 w-5 text-yellow-500" /> {upgrade.cost}
                </span>
                {upgrade.isPurchased ? (
                  <Button disabled className="bg-green-600 text-white">–ü—Ä–∏–¥–±–∞–Ω–æ!</Button>
                ) : (
                  <Button
                    onClick={() => handlePurchase(upgrade)}
                    disabled={!upgrade.isAvailable || currentEnergy < upgrade.cost}
                    className="bg-brand-primary text-primary-foreground hover:bg-brand-primary-hover"
                  >
                    {upgrade.isAvailable ? "–ü—Ä–∏–¥–±–∞—Ç–∏" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                  </Button>
                )}
              </div>
            </Card>
          ))}
        </div>

        <h3 className="text-2xl font-bold text-foreground mt-8 mb-4">–í—ñ–∑—É–∞–ª—å–Ω—ñ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:</h3>
        <p className="text-muted-foreground">
          (–¢—É—Ç –±—É–¥—É—Ç—å –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –¥–ª—è —Ç–≤–æ—î—ó –±–∞–∑–∏)
        </p>
      </CardContent>
    </Card>
  );
};

export default CosmicShop;